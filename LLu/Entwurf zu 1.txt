# CMEM

## Struktur der CMEM
Die CMEM ist als eigener Prozess geplant, welcher intern eine Datenstruktur hält und die Schnitstellen funktionen komunizieren mittels Nachrichtenaustausch mit diesem.

## Schnitstellen/Wrapper funktionen der CMEM

### initCMEM(RemTime,Datei)
 Startet eine Instanz der CMEM und Liefert die PID zurück.

### delCMEM(CMEM)
 Dient dazu die CMEM zu beenden, es wird ein Kill request An diese Gesendet.
 Der Status Wird zurück gesendet, und anschließend von der Schnittstelle zurück gegeben.
	- send : {request,kill,self())
	- Response : {ok}
 

### updateClient(CMEM,ClientID,NNr,Datei)
 speichert bzw. aktualisiert im CMEM den Client ClientID und die an ihn gesendete Nachrichtenummer NNr.
 Liefert ein ok	
	- send {request,update,ClientID,NNr,self(),Datei},
	- Response {ok}


### getClientNNr(CMEM,ClientID) ->
 gibt die als nächstes vom Client erwartete Nachrichtennummer des Clients ClientID aus CMEM zurück. Ist der Client unbekannt wird 1 zurück gegeben.
	- send  {request,get,ClientID,self()},
	- Response {N}
	
## Internes des CMEM 
Intern verwendet die CMEM eine liste von Tupeln mit der Struktur
Tupel -> {ClientID,UpdateTime,Value} 

Es werden inten lediglich 2 Funktionen benötigt:
	- findCNum um die Daten zu eiem Client zu finden
	- updateCNum um die Daten zu eiem Client zu aktualisieren

# DLQ

## Struktur der DLQ

Die DLQ ist als pasive Datenstruktur geplant, und hat die Formatierung:
DLQ ->  { Size , List }

Wobei List wiederung eine Liste von Eintrags Tupeln ist :
List -> [ Eintrag1,Eintrag2, . . . ,EintragN]

Und ein Eintrag hat die Formatierung
Eintrag ->  {Nummer,Nachricht}
 
Die Struktur einer Nachricht ist bereits in den anforderungen spezifiziert.



## Internes der DLQ:

### initialisierung der DLQ
 es ist die struktur der DLQ mit einer lehrern lsite und Der übergebenen Größe als Size erstellt werden.

### Löschen der DLQ
 Da die DLQ Rein Passiv ist muss nichts aufgeräumt werden, wenn sie nicht mehr benötigt wird. 

### Erwartete nummer:
 Es muss lediglich die Nummer des vordersten eintrag Tupels der Liste der DLQ zurück gegeben werden, handelt es sich um eine lehre liste, so ist 1 zurück zu geben.

### Nachricht auf der DLQ Ablegen
 Es ist ein Eintrags Tupel zu erstellen, die Nachricht wird übergeben, und die Nummer kann der Nachricht entnommen werden.
 Das entsehende Tupel wird an den anfang der Liste gehängt, und die Liste anschließend auf die Länge *Size* der DLQ Gekürtzt, falls notwendig.

### Auslieferung einer Nachricht an den Client
 Die Liste Der DLQ Wird durchlaufen, und geprüft, ob die Angefrage Nachricht in der DLQ enthalten ist, solte dies der fall sein, so wird sie an den Entfänger gesendet und die Nummer Zurück gegeben.
 Ist Die Nummer nicht mehr in der Liste enthalten, so wird die letzte Nachricht gesendet und ihre Nummer zurück gegeben.
 Da Die liste Sortiert ist, ist die letzte Nachricht die mit der geringsten Nummer.

 Die Liste muss Ganz durchlaufen werden, da wir löcher haben können, es kann also nicht geprüft werden, ob ein element enthalten ist indem man die höchste nummer der liste - der Länge der liste nimmt und prüft ob die anfrage kleiner ist.
 

