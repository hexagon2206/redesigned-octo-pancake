package mware_lib;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;



/**
 * @author lukas_luehr
 * handels requests and responses, also mcommunication over the TCP sockets
 */
public class Kommunikationsmodul  implements Runnable  {
	
	ServerSocket ss;
	
	private class SocketListEntrie{
		SocketListEntrie(Socket s) throws IOException{
			this.s = s;
			this.baos = new ByteArrayOutputStream();
			this.os = s.getOutputStream();
			this.is = s.getInputStream();
		}
		Socket s;
		ByteArrayOutputStream baos;
		OutputStream os;
		InputStream is;
	}
	
	
	Map<SocketAddress,SocketListEntrie> sockets;
	
	ObjectBroker broaker;
	
	/**
	 * @param port The port to listen on, can be 0  if it is not relevant
	 * @param broaker an instance of the Broker responcable for handeling incomming data
	 * @throws IOException if it was not possible to bind a server socket to the spezified port
	 */
	public Kommunikationsmodul(int port,ObjectBroker broaker) throws IOException{
		ss= new ServerSocket(port);
		ss.setSoTimeout(1);
		sockets=new HashMap<>();
		this.broaker = broaker;
	}
	
	
	/**
	 * used to send a Request to a remote host
	 * @param requestID the ID of the Request, important for responses
	 * @param host the Host, on which die remote object is located
	 * @param port the port of the middleware on the host
	 * @param objName the name of the object
	 * @param methode the methode to invokle
	 * @param args the parameters 
	 */
	public void call(int requestID,String host,int port,String objName,String methode,Object... args){
		try {
			Request re = new Request();
		re.requestID = requestID;
		re.obj=objName;
		re.methode=methode;
		re.args=args;
		
			
		byte[] data = Decoder.request2Bytes(re);
		InetAddress inet;
		
			inet = InetAddress.getByName(host);
			
			SocketAddress sockAddr = new InetSocketAddress(inet,port);
			SocketListEntrie s = sockets.get(sockAddr);
			
			
			if(s==null || s.s.isClosed()){
				System.out.println("opening new Route");
				
				s=new SocketListEntrie(new Socket(inet,port));
				sockets.put(sockAddr, s);
			}
			
			synchronized (s) {
				s.os.write(data);
				s.os.flush();
			}
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * used to send a response for a request to a remote host
	 * @param addr The address Referenz
	 * @param RequestID the ID of the request to respond to
	 * @param returnValue the value to transmit to the remote host
	 * @throws IOException if an error acures transmitting the data
	 */
	public void response(SocketAddress addr,int RequestID,Object returnValue) throws IOException{
		Response rs=new Response();
		rs.requestID=RequestID;
		rs.value = returnValue;

		byte[]data = Decoder.response2Bytes(rs);
		SocketListEntrie s;
		synchronized (sockets) {
			s = sockets.get(addr);
		}
		if(s==null){
			Socket so = new Socket();
			so.connect(addr);
			s = new SocketListEntrie(so);
			sockets.put(addr, s);
		}
		synchronized (s) {
			s.os.write(data);
			s.os.flush();
		}
	}
	
	public void run(){
		try {
			while(true){
				try{
					Socket s = ss.accept();
					System.out.println("connection from :"+s.getRemoteSocketAddress());
					SocketListEntrie os = sockets.get(s.getRemoteSocketAddress());
					if(os==null || os.s.isClosed()){
						sockets.put(s.getRemoteSocketAddress(), new SocketListEntrie(s));
						System.out.println("new Route to Target");
					}
				}catch(SocketTimeoutException e){}
				for(Iterator<Map.Entry<SocketAddress,SocketListEntrie>> it = sockets.entrySet().iterator(); it.hasNext();) {
					Map.Entry<SocketAddress,SocketListEntrie> e=it.next();
					SocketListEntrie sle = e.getValue();
					int readable = sle.is.available();
					if(0!=readable){
						byte[] data = new byte[readable];
						readable = sle.is.read(data);
						if(readable>0){
							sle.baos.write(data, 0, readable);
						}
						Message m;
						while(null!=(m=Decoder.decode(sle.baos))){
							if(m instanceof Request){
								broaker.call(e.getKey(),((Request)m).requestID, ((Request)m).obj, ((Request)m).methode, ((Request)m).args);
							}else if(m instanceof Response){
								broaker.response(((Response)m).requestID, ((Response)m).value);
							}
						}
					}
					if(sle.s.isClosed()){
						it.remove();
					}
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalArgumentException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InvocationTargetException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}


	/**
	 * @return the Name of the local Host
	 */
	public String getHost() {
		return ss.getLocalSocketAddress();
	}

	/**
	 * @return the port of the local Server socket
	 */
	public int getPort() {
		return ss.getLocalPort();
	}
	
}
